Test cases for '2-matrix_divided.py'
=================================

The function 'matrix_divided', divides all elements of a matrix
---------------------------------------------------------------

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
#Define test matricies
>>> m1 = [[0, 1, 2], [3, 4, 5]]
>>> m2 = [[0.5, 1.2, 2.2], [1, 2, 3]]
>>> m3 = [[1, 2], [2, 4, 6]]
>>> m4 = []

Case #1: test passsing an integer number to 'div'
>>>matrix_divided(m1, 2)
[[0, 0.5, 1], [1.5, 2, 2.5]]

Case #2: test passsing an integer number to 'div'
>>>matrix_divided(m2, 2)
[[0.25, 0.6, 1.1], [0.5, 1, 2.5]]

Case #3: test passing an empty list
>>> matrix_divided(m4, 1)
[]

Case #4: test different sizes of 'matrix'
>>> matrix_divided(m3, 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

Case #5: test 'div' as a string
>>> matrix_divided(m1, "2")
Traceback (most recent call last):
...
TypeError: div must be a number

Case #6: test 'matrix' is not a list
>>> matrix_divided("string", 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Case #7: test 'div' equal to 0
>>> matrix_divided(m1, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

Case #8: test with zero arguments
>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Case #9: test passing 1 argument in 'matrix'
>>> matrix_divided(m1)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

Case #10: test passing 1 argument in 'matrix'
>>> matrix_divided(m1, )
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
